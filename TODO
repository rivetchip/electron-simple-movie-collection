🐛 Bugs (todo) :
----------------
+ lister tous les "FIXME"

attribution for tmdb: ( about page )

https://www.themoviedb.org/about/logos-attribution
"This product uses the TMDb API but is not endorsed or certified by TMDb."

dont use document.body on render

https://codepen.io/ismamz/pen/ppGMWM?editors=1010

move poster on the left + auto heigh based on content

ANDROID 23 -> Chrome 51 (default)

SAUVEGARDE des posters : deux solutions 
- tout enregistrer en base 64 -> ça fait environ 200/250Mo pour 1600 films (800x600 120ko jpg)
- seulement enregistrer les movie temporaire en : poster: base64;xxqdqsddsdsddsqdsq
et tester si ça sommence par 'base64;' on enregistre le file

background-image: url(data:image/png;base64,







currying

    let replacer = (options) => (string) => replace(string, options)

    var toreplace = replacer({ // 1
        name:'john'
    })

var string = toreplace('hello name') // 2
var string2 = toreplace('hello name !')





BABELRC different env

last 2 versions

    "env": {
        "android": {
            "presets": [
                ["env", {"targets": {"chrome": 50}, "useBuiltIns": true}]
            ]
        },
        "electron": {
            "presets": [
                ["env", {"targets": {"chrome": 61}, "useBuiltIns": true}]
            ]
        }
    }

    "bundle-electron": "BABEL_ENV=electron npm run bundle",
    "bundle-android": "BABEL_ENV=android npm run bundle",

    "serve-android": "BABEL_ENV=android npm run serve",









exports.createSnackbar = (() => {
    let duration = 3000
    let previous // previous snack

    const onAnimationendEvent = (event, elapsed) => {
        let target = event.target

        if( event.animationName == 'snackbar-fadeout' ) {
            // when the animation end, we remove self
            target.remove()

            if( previous === target ) {
                previous = null
            }
        }
    }

    return (viewport, message) => {
        if( previous ) {
            // dismiss
            previous.remove()
        }

        let snackbar = document.createElement('snackbar')
        snackbar.innerText = message
        snackbar.classList.add('is-visible')
        
        snackbar.addEventListener('animationend', onAnimationendEvent)
        snackbar.addEventListener('webkitAnimationEnd', onAnimationendEvent)

        let timeoutId = setTimeout(() => {
            // dismiss
            snackbar.classList.remove('is-visible');
        }, duration)

        previous = snackbar
        viewport.appendChild(snackbar)
    }
})()