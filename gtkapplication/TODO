static

meson -Ddefault_library=static _build .
ninja -C _build

copie le .a,
-L. dÃ©finir le chemin des library dans le dossier de compilation
-I include header

gcc ../test2.c `pkg-config --cflags --libs glib-2.0 json-glib-1.0` -L. -l:libjson-glib-1.0.a -g -o main && ./main

==========

env = environment()
env.set('CXX', ' '.join(meson.get_compiler('cpp').cmd_array()))
env.set('CXXFLAGS', ' '.join(get_option('cpp_args')))
env.set('LDFLAGS', ' '.join(get_option('cpp_link_args')))

# Question 2
if meson.is_cross_build()
  # e.g. 'arm-linux-gnueabihf-'
  cross_base = meson.get_cross_property('cross_base')
else 
  cross_base = ''
endif

env.set('LD', cross_base + 'ld')
env.set('AR', cross_base + 'ar')
env.set('RANLIB', cross_base + 'ranlib')
env.set('STRIP', cross_base + 'strip')
env.set('OBJCOPY', cross_base + 'objcopy')

==========

# libostd_static = declare_dependency(
#     include_directories: libostd_includes,
#     link_with: libostd_lib.get_static_lib()
# )

# dep = dependency('foo', fallback : [subproject_name, variable_name])

libgvc = subproject('json-glib',
  default_options: [
    'package-name=' + meson.project_name(),
    'package-version=' + meson.project_version(),
    # 'pkgdatadir=' + pkgdatadir,
    # 'pkglibdir=' + pkglibdir,
    'static=true',
    'with-introspection=true',
    'buildtype=static_library'
  ]
)

my_inc = include_directories(...)
my_lib = static_library(...)
my_dep = declare_dependency(link_with : my_lib, include_directories : my_inc)

========

workaround : https://gitlab.gnome.org/GNOME/libgnome-volume-control/blob/eeaffe5c3da4ff720402ff6aab13e76c6c273403/meson.build
https://gitlab.gnome.org/GNOME/gnome-shell/blob/de0e21612c89d55e8833cb0d321ffc1c5e35fe3f/meson.build#L230

meson_options txt :
option('static',   type: 'boolean',   value: false,   description: 'Build as a static library.' )

projeect => default_options: ['static=true']

enable_static = get_option('static')

if(enable_static) ... static_library(...)

Append custom library path #3926
https://github.com/mesonbuild/meson/issues/3926
deps += [compiler.find_library(libname, dirs : [devkitpro_dir + '/libnds/lib'])]

========

Compile vala programs with gee:

valac --pkg gee-0.8 --pkg gtk+-3.0 test.vala -C





=====================


/* Read up to (and including) a newline from STREAM into *LINEPTR
   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or
   NULL), pointing to *N characters of space.  It is realloc'd as
   necessary.  Returns the number of characters read (not including the
   null terminator), or -1 on error or EOF.  */

int getline(char **lineptr, size_t *n, FILE *stream)
{
static char line[256];
char *ptr;
unsigned int len;

   if (lineptr == NULL || n == NULL)
   {
      errno = EINVAL;
      return -1;
   }

   if (ferror (stream))
      return -1;

   if (feof(stream))
      return -1;
     
   fgets(line,256,stream);

   ptr = strchr(line,'\n');   
   if (ptr)
      *ptr = '\0';

   len = strlen(line);
   
   if ((len+1) < 256)
   {
      ptr = realloc(*lineptr, 256);
      if (ptr == NULL)
         return(-1);
      *lineptr = ptr;
      *n = 256;
   }

   strcpy(*lineptr,line); 
   return(len);
}


=====================

loop pointers

char **values = movie->countries;
for (char **ptr = values; *ptr; ptr++) {
    printf("<< %s \n", *ptr);
}
for (size_t i = 0; values[i] != NULL; i++) {
    printf("<< %s \n", values[i]);
}


VALGRIND leak checks for segfault : valgrind --leak-check=full ./program

valgrind --tool=memcheck --leak-check=full --leak-resolution=high --num-callers=20 --log-file=vgdump --suppressions=gtk.supp --suppressions=glib.supp ./moviecollection


